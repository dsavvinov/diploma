@ARTICLE{wichmann95, 
	author   = {B. A. Wichmann and A. A. Canning and D. L. Clutterbuck and L. A. Winsborrow and N. J. Ward and D. W. R. Marsh},
	journal  = {Software Engineering Journal}, 
	title    = {Industrial perspective on static analysis}, 
	year     = {1995}, 
	volume   = {10}, 
	number   = {2}, 
	pages    = {69-75}, 
	keywords = {safety-critical software;software metrics;software performance evaluation;software quality;software standards;system monitoring;assurance;benefit assesment;industrial perspective;safety critical software;software development;standards;static analysis;Software metrics;Software performance;Software quality;Software safety;Software standards}, 
	doi      = {10.1049/sej.1995.0010}, 
	ISSN     = {0268-6961}, 
	month    = {March},
}

@INPROCEEDINGS{lint,
	author    = {S. C. Johnson},
	title     = {Lint, a C Program Checker},
	booktitle = {COMP. SCI. TECH. REP},
	year      = {1978},
	pages     = {78--1273},
	publisher = {}
}

@article{lines1,
	title={How Many Lines of Code in Windows},
	author={O’Brien, Larry},
	journal={Knowing. Net},
	year={2005}
}

@article {lines2,
	title = {Counting potatoes: The size of Debian 2.2},
	year = {2002},
	month = {March},
	abstract = {Debian is possibly the largest free software distribution, with well over 2,800 source packages in the latest stable release (Debian 2.2) and more than 4,000 source packages in the release currently in preparation. But, how large is "the largest"? We show that Debian 2.2 includes more than 55,000,000 physical SLOC (almost twice than Red Hat 7.1, released about 8 months later), showing that the Debian development model (based on the work of a large group of voluntary developers spread around the world) is at least as capable as other development methods (like the more centralized one) to manage distributions of this size. It is also shown that if Debian had been developed using traditional proprietary methods, that its cost would be close to $1.9 billion. In addition, we offer both an analysis of the programming languages used in the distribution.},
	attachments = {http://flosshub.org/sites/flosshub.org/files/counting-potatoes.html},
	author = {Jesus M. Gonzalez-Barahona}
}

@ONLINE{ wiki:lines3,
	author = "Wikipedia",
	title = "Source lines of code",
    howpublished = "Википедия, свободная энциклопедия",
	year = "2017",
	url = "https://en.wikipedia.org/w/index.php?title=Source_lines_of_code&oldid=776858093",
	urldate      = "02.05.2017",
	language = "russian"
}

@ONLINE{ idea_duplicates,
	author = "IntelliJ Labs",
	title = "Analyzing Duplicates",
	howpublished = "IntelliJ IDEA Online Reference",
	year = "2017",
	url = "https://www.jetbrains.com/help/idea/2017.1/analyzing-duplicates.html",
	urldate = "02.05.2017",
	language = "english"
}

@inproceedings{escape_analysis,
	author = {Kotzmann, Thomas and M\"{o}ssenb\"{o}ck, Hanspeter},
	title = {Escape Analysis in the Context of Dynamic Compilation and Deoptimization},
	booktitle = {Proceedings of the 1st ACM/USENIX International Conference on Virtual Execution Environments},
	series = {VEE '05},
	year = {2005},
	isbn = {1-59593-047-7},
	location = {Chicago, IL, USA},
	pages = {111--120},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1064979.1064996},
	doi = {10.1145/1064979.1064996},
	acmid = {1064996},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Java, deoptimization, escape analysis, just-in-time compilation, optimization, scalar replacement, stack allocation, synchronization removal},
}

@techreport{c_specification,
	type = {Standard},
	key = {ISO/IEC 9899:2011},
	month = {12},
	year = {2011},
	title = {Information technology — Programming languages — C},
	address = {Geneva, CH},
	institution = {International Organization for Standardization}
}

@ARTICLE{system_f_inference,
	author = {J. B. Wells},
	title = {Typability and Type Checking in System F Are Equivalent and Undecidable},
	journal = {ANNALS OF PURE AND APPLIED LOGIC},
	year = {1998},
	volume = {98},
	pages = {111--156}
}