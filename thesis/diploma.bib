@ARTICLE{wichmann95, 
	author   = {B. A. Wichmann and A. A. Canning and D. L. Clutterbuck and L. A. Winsborrow and N. J. Ward and D. W. R. Marsh},
	journal  = {Software Engineering Journal}, 
	title    = {Industrial perspective on static analysis}, 
	year     = {1995}, 
	volume   = {10}, 
	number   = {2}, 
	pages    = {69-75}, 
	keywords = {safety-critical software;software metrics;software performance evaluation;software quality;software standards;system monitoring;assurance;benefit assesment;industrial perspective;safety critical software;software development;standards;static analysis;Software metrics;Software performance;Software quality;Software safety;Software standards}, 
	doi      = {10.1049/sej.1995.0010}, 
	ISSN     = {0268-6961}, 
	month    = {March},
}

@INPROCEEDINGS{lint,
	author    = {S. C. Johnson},
	title     = {Lint, a C Program Checker},
	booktitle = {COMP. SCI. TECH. REP},
	year      = {1978},
	pages     = {78--1273},
	publisher = {}
}

@article{lines1,
	title={How Many Lines of Code in Windows},
	author={O’Brien, Larry},
	journal={Knowing. Net},
	year={2005}
}

@article {lines2,
	title = {Counting potatoes: The size of Debian 2.2},
	year = {2002},
	month = {March},
	abstract = {Debian is possibly the largest free software distribution, with well over 2,800 source packages in the latest stable release (Debian 2.2) and more than 4,000 source packages in the release currently in preparation. But, how large is "the largest"? We show that Debian 2.2 includes more than 55,000,000 physical SLOC (almost twice than Red Hat 7.1, released about 8 months later), showing that the Debian development model (based on the work of a large group of voluntary developers spread around the world) is at least as capable as other development methods (like the more centralized one) to manage distributions of this size. It is also shown that if Debian had been developed using traditional proprietary methods, that its cost would be close to $1.9 billion. In addition, we offer both an analysis of the programming languages used in the distribution.},
	attachments = {http://flosshub.org/sites/flosshub.org/files/counting-potatoes.html},
	author = {Jesus M. Gonzalez-Barahona}
}

@ONLINE{ wiki:lines3,
	author = "Wikipedia",
	title = "Source lines of code",
    howpublished = "Википедия, свободная энциклопедия",
	year = "2017",
	url = "https://en.wikipedia.org/w/index.php?title=Source_lines_of_code&oldid=776858093",
	urldate      = "02.05.2017",
	language = "russian"
}

@ONLINE{ idea_duplicates,
	author = "IntelliJ Labs",
	title = "Analyzing Duplicates",
	howpublished = "IntelliJ IDEA Online Reference",
	year = "2017",
	url = "https://www.jetbrains.com/help/idea/2017.1/analyzing-duplicates.html",
	urldate = "02.05.2017",
	language = "english"
}

@inproceedings{escape_analysis,
	author = {Kotzmann, Thomas and M\"{o}ssenb\"{o}ck, Hanspeter},
	title = {Escape Analysis in the Context of Dynamic Compilation and Deoptimization},
	booktitle = {Proceedings of the 1st ACM/USENIX International Conference on Virtual Execution Environments},
	series = {VEE '05},
	year = {2005},
	isbn = {1-59593-047-7},
	location = {Chicago, IL, USA},
	pages = {111--120},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1064979.1064996},
	doi = {10.1145/1064979.1064996},
	acmid = {1064996},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Java, deoptimization, escape analysis, just-in-time compilation, optimization, scalar replacement, stack allocation, synchronization removal},
}

@techreport{c_specification,
	type = {Standard},
	key = {ISO/IEC 9899:2011},
	month = {12},
	year = {2011},
	title = {Information technology — Programming languages — C},
	address = {Geneva, CH},
	institution = {International Organization for Standardization}
}

@ARTICLE{system_f_inference,
	author = {J. B. Wells},
	title = {Typability and Type Checking in System F Are Equivalent and Undecidable},
	journal = {ANNALS OF PURE AND APPLIED LOGIC},
	year = {1998},
	volume = {98},
	pages = {111--156}
}

@inproceedings{Luc88,
	author = {Lucassen, J. M. and Gifford, D. K.},
	title = {Polymorphic Effect Systems},
	booktitle = {Proceedings of the 15th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	series = {POPL '88},
	year = {1988},
	isbn = {0-89791-252-7},
	location = {San Diego, California, USA},
	pages = {47--57},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/73560.73564},
	doi = {10.1145/73560.73564},
	acmid = {73564},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@INPROCEEDINGS{Vak09, 
	author={M. Vakilian and D. Dig and R. Bocchino and J. Overbey and V. Adve and R. Johnson}, 
	booktitle={2009 IEEE/ACM International Conference on Automated Software Engineering}, 
	title={Inferring Method Effect Summaries for Nested Heap Regions}, 
	year={2009}, 
	pages={421-432}, 
	keywords={Java;inference mechanisms;parallel languages;parallel programming;DPJizer;Eclipse plug-in;deterministic parallel Java;effect inference algorithm;inferring method effect summaries;nested heap region;object ownership;Engines;Heart;Inference algorithms;Java;Lab-on-a-chip;Program processors;Programming profession;Safety;Software engineering;Writing}, 
	doi={10.1109/ASE.2009.68}, 
	ISSN={1938-4300}, 
	month={Nov},}

@inproceedings{Green99,
	author = {Greenhouse, Aaron and Boyland, John},
	title = {An Object-Oriented Effects System},
	booktitle = {Proceedings of the 13th European Conference on Object-Oriented Programming},
	series = {ECOOP '99},
	year = {1999},
	isbn = {3-540-66156-5},
	pages = {205--229},
	numpages = {25},
	url = {http://dl.acm.org/citation.cfm?id=646156.679836},
	acmid = {679836},
	publisher = {Springer-Verlag},
	address = {London, UK, UK},
} 

@book{Schwartz67,
    title={Mathematical Aspects of Computer Science},
    author={Schwartz, J.T. and Society, A.M.},
    isbn={9780821867280},
    series={American Mathematical Society. Proceedings of Symposia in Applied Mathematics},
    url={https://books.google.ru/books?id=ynigSICJflYC},
    year={1967},
    publisher={American Mathematical Soc.}
}

@article{Hoare69,
    author = {Hoare, C. A. R.},
    title = {An Axiomatic Basis for Computer Programming},
    journal = {Commun. ACM},
    issue_date = {Oct. 1969},
    volume = {12},
    number = {10},
    year = {1969},
    issn = {0001-0782},
    pages = {576--580},
    numpages = {5},
    url = {http://doi.acm.org/10.1145/363235.363259},
    doi = {10.1145/363235.363259},
    acmid = {363259},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {axiomatic method, formal language definition, machine-independent programming, program documentation, programming language design, theory of programming' proofs of programs},
}

@Inbook{Nielson99,
    author="Nielson, Flemming
    and Nielson, Hanne Riis",
    editor="Olderog, Ernst-R{\"u}diger
    and Steffen, Bernhard",
    title="Type and Effect Systems",
    bookTitle="Correct System Design: Recent Insights and Advances",
    year="1999",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="114--136",
    isbn="978-3-540-48092-1",
    doi="10.1007/3-540-48092-7_6",
    url="http://dx.doi.org/10.1007/3-540-48092-7_6"
}

@inproceedings{Wheeler52,
    author = {Wheeler, D. J.},
    title = {The Use of Sub-routines in Programmes},
    booktitle = {Proceedings of the 1952 ACM National Meeting (Pittsburgh)},
    series = {ACM '52},
    year = {1952},
    location = {Pittsburgh, Pennsylvania},
    pages = {235--236},
    numpages = {2},
    url = {http://doi.acm.org/10.1145/609784.609816},
    doi = {10.1145/609784.609816},
    acmid = {609816},
    publisher = {ACM},
    address = {New York, NY, USA},
} 

@book{dragon-book,
    author = {Aho, Alfred V. and Sethi, Ravi and Ullman, Jeffrey D.},
    title = {Compilers: Principles, Techniques, and Tools},
    year = {1986},
    isbn = {0-201-10088-6},
    publisher = {Addison-Wesley Longman Publishing Co., Inc.},
    address = {Boston, MA, USA},
}

@book{muchnick,
	author = {Muchnick, Steven S.},
	title = {Advanced Compiler Design and Implementation},
	year = {1997},
	isbn = {1-55860-320-4},
	publisher = {Morgan Kaufmann Publishers Inc.},
	address = {San Francisco, CA, USA},
}

@TECHREPORT{Bierman03,
	author = {G. M. Bierman and M. J. Parkinson and A. M. Pitts},
	title = { An imperative core calculus for Java and Java with effects},
	institution = {},
	year = {2003}
}

@article{Flanagan08,
	author = {Flanagan, Cormac and Freund, Stephen N. and Lifshin, Marina and Qadeer, Shaz},
	title = {Types for Atomicity: Static Checking and Inference for Java},
	journal = {ACM Trans. Program. Lang. Syst.},
	issue_date = {July 2008},
	volume = {30},
	number = {4},
	year = {2008},
	issn = {0164-0925},
	pages = {20:1--20:53},
	articleno = {20},
	numpages = {53},
	url = {http://doi.acm.org/10.1145/1377492.1377495},
	doi = {10.1145/1377492.1377495},
	acmid = {1377495},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Atomicity, concurrent programs, type inference, type systems},
}

@misc{JSR308,
	author = {Michael D. Ernst},
	title = {{Type Annotations} specification ({JSR} 308)},
	month = {September~12,},
	year = {2008},
	howpublished = {\url{http://types.cs.washington.edu/jsr308/}}
}

@ONLINE{checker-framework,
	title = "Checker Framework",
	howpublished = "Checker Framework online reference",
	year = "2017",
	url =  "https://checkerframework.org/",
	urldate = "08.05.2017",
	language = "english"
}

@INPROCEEDINGS{FX87, 
	author={P. Jouvelot and D. K. Gifford}, 
	booktitle={Proceedings. 1988 International Conference on Computer Languages}, 
	title={The FX-87 Interpreter}, 
	year={1988}, 
	pages={65-72}, 
	keywords={functional programming;high level languages;parallel programming;program interpreters;FX-87 Interpreter;automatic detection;compile-time;first-class procedures;imperative programs;parallelizable constructs;parallelizable expressions;polymorphic effect system;polymorphic typed functional language;procedure values;programming language FX-87;side-effect analysis;static program analysis;static properties;type checking;unobservable effects;Computer languages;Computer science;Functional programming;Job shop scheduling;Laboratories;Parallel machines;Parallel programming;Performance analysis;Program processors;Programming profession}, 
	doi={10.1109/ICCL.1988.13044}, 
	month={Oct},
}